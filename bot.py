from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, request
import logging
import json
import os
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
TOKEN = os.environ.get('TOKEN', '7806385439:AAHgwH1Wc2T2W6CfMSFrq-p9MyqV1Bsky1g')  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
CHANNEL_ID = os.environ.get('CHANNEL_ID', '@trusy_garderoba')
PDF_FILE_PATH = "kapsula_baza.pdf"
CHANNEL_URL = os.environ.get('CHANNEL_URL', 'https://t.me/trusy_garderoba')
IMAGE_PATH = "kapsula.png"
STATS_FILE = "stats.json"
ADMIN_ID = int(os.environ.get('ADMIN_ID', '1932002815'))  # –í–∞—à ID

app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r") as f:
            return json.load(f)
    return {"guide_download_count": 0}

def save_stats(stats):
    with open(STATS_FILE, "w") as f:
        json.dump(stats, f, indent=4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "üëãüèª –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ ¬´–¢—Ä—É—Å—ã –∏–∑ –º–æ–µ–≥–æ –ì–∞—Ä–¥–µ—Ä–æ–±–∞¬ª. –°–µ–π—á–∞—Å –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–±—Ä–∞—Ç—å –≥–∏–¥ ¬´10 –≤–µ—â–µ–π = 28 –æ–±—Ä–∞–∑–æ–≤¬ª.\n"
        "–í —ç—Ç–æ–º –≥–∞–π–¥–µ:\n"
        "‚úîÔ∏è —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –≤–µ—â–µ–π —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã\n"
        "‚úîÔ∏è –∫–∞–ø—Å—É–ª—å–Ω—ã–π –≥–∞—Ä–¥–µ—Ä–æ–± –∏–∑ 10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "‚úîÔ∏è 28 –≥–æ—Ç–æ–≤—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏\n"
        "üîî –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª."
    )
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_URL)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        with open(IMAGE_PATH, "rb") as photo:
            await update.message.reply_photo(photo=photo, caption=welcome_message, reply_markup=reply_markup)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {IMAGE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ù–æ —Ç—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≥–∏–¥!")

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        
        if chat_member.status in ["member", "administrator", "creator"]:
            with open(PDF_FILE_PATH, "rb") as file:
                await query.message.reply_document(document=file, caption="–í–æ—Ç —Ç–≤–æ–π –≥–∏–¥ ¬´10 –≤–µ—â–µ–π = 28 –æ–±—Ä–∞–∑–æ–≤¬ª! üéâ")
            
            stats = load_stats()
            stats["guide_download_count"] += 1
            save_stats(stats)
            
            await query.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_URL)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîî", reply_markup=reply_markup)
            await query.answer("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await query.answer("–û—à–∏–±–∫–∞!")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    stats = load_stats()
    count = stats.get("guide_download_count", 0)
    await update.message.reply_text(f"–ì–∏–¥ ¬´10 –≤–µ—â–µ–π = 28 –æ–±—Ä–∞–∑–æ–≤¬ª —Å–∫–∞—á–∞–ª–∏: {count} —Ä–∞–∑")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("stats", stats))
application.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))

# Flask –¥–ª—è webhook
@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.process_update(update)
    return 'OK'

@app.route('/')
def index():
    return "Bot is running!"

if __name__ == "__main__":
    # –î–ª—è Render: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ Flask
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)